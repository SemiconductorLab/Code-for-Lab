#These lines import the necessary packages
from itertools import cycle
from mpl_toolkits.mplot3d import Axes3D
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np


x=0
fig = plt.figure(figsize=(8,4),dpi=200)
ax = fig.add_subplot(111)
dims = 1
step_n = 1000              #number of steps per run of the model
step_set = [-1, 0, 1]      #possible outcomes of each step


arr = []

while x<1500:                     #number of runs of the model    
    origin = np.zeros((1,dims))
    step_shape = (step_n,dims)
    steps = np.random.choice(a=step_set, size=step_shape, p=[1/3,1/3,1/3] )  #the set of p values dictate the probabilities of each outcome of each step. Varying these is how the biased model is created
    path = np.concatenate([origin, steps]).cumsum(0)
    start = path[:1]
    stop = path[-1:]
    p2 = int(path[step_n - 1])
    arr.append(p2)
    
    ax.scatter(np.arange(step_n+1), path, c="blue",alpha=0.25,s=0.05);
    ax.plot(path,c="cyan",alpha=0.5,lw=0.5,ls="-",);
    ax.plot(0, start, c="black", marker="o")      
    ax.plot(step_n, stop, c="black", marker="o")
    ax.set_xlabel('Step')             #axis labels for path plot
    ax.set_ylabel('Displacement')
    plt.tight_layout(pad=0)
    x=x+1
    
fig2 = plt.figure(figsize=(14,8),dpi=200)
ax2 = fig2.add_subplot(111)
arr = np.asarray(arr)

for value in np.nditer(arr): 
    occurrences = np.count_nonzero(arr == value)
    ax2.plot(value, occurrences, marker = 'o',color = 'black')
ax2.set_xlabel('Displacement ')       #axis labels for the distribution plot
ax2.set_ylabel('Frequency')
